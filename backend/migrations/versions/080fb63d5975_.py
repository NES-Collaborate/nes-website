"""

Revision ID: 080fb63d5975
Revises: 
Create Date: 2024-04-23 12:28:30.036868

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '080fb63d5975'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('cpf', sa.String(), nullable=False),
    sa.Column('birth', sa.Date(), nullable=False),
    sa.Column('type', sa.Enum('admin', 'other', 'student'), nullable=False),
    sa.Column('softDelete', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_cpf'), 'users', ['cpf'], unique=True)
    op.create_table('achievements',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('olympic medal', 'certificate'), nullable=False),
    sa.Column('olympicAbbrev', sa.String(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('medal', sa.Enum('participation', 'bronze', 'silver', 'gold'), nullable=False),
    sa.Column('link', sa.String(), nullable=True),
    sa.Column('otherInfo', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('ready', 'pending', 'soft delete'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bankAccounts',
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('bankNumber', sa.Integer(), nullable=False),
    sa.Column('agencyNumber', sa.Integer(), nullable=False),
    sa.Column('accountNumber', sa.Integer(), nullable=False),
    sa.Column('accountType', sa.Enum('Conta Corrente', 'Conta Poupan√ßa'), nullable=False),
    sa.Column('pix', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('classrooms',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expense_categories',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('properties',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('loanedAt', sa.DateTime(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('schools',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('series',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('activityGroups',
    sa.Column('classroom_id', sa.Integer(), nullable=True),
    sa.Column('isRecovery', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['classroom_id'], ['classrooms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('addresses',
    sa.Column('street', sa.String(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=True),
    sa.Column('neighborhood', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=False),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('cep', sa.String(), nullable=True),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('schoolId', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['schoolId'], ['schools.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('attatches',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('location', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('File', 'Link'), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('achievementId', sa.Integer(), nullable=True),
    sa.Column('propertyId', sa.Integer(), nullable=True),
    sa.Column('classroomId', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['achievementId'], ['achievements.id'], ),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['classroomId'], ['classrooms.id'], ),
    sa.ForeignKeyConstraint(['propertyId'], ['properties.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('emails',
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('schoolId', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['schoolId'], ['schools.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('enrollments',
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('classroomId', sa.Integer(), nullable=False),
    sa.Column('role', sa.Enum('admin', 'teacher', 'student', 'monitor'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['classroomId'], ['classrooms.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('phone_numbers',
    sa.Column('value', sa.String(), nullable=False),
    sa.Column('isEmergency', sa.Boolean(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('schoolId', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['schoolId'], ['schools.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('posts',
    sa.Column('classromId', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('Notice', 'ClassMaterial', 'Activity', 'Other'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['classromId'], ['classrooms.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('students',
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('serieId', sa.Integer(), nullable=True),
    sa.Column('scolarshipValue', sa.Float(), nullable=False),
    sa.Column('achievementsId', sa.Integer(), nullable=True),
    sa.Column('responsibleName', sa.String(), nullable=False),
    sa.Column('responsibleNumber', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['achievementsId'], ['achievements.id'], ),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['serieId'], ['series.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('activities',
    sa.Column('postId', sa.Integer(), nullable=True),
    sa.Column('startDate', sa.DateTime(), nullable=True),
    sa.Column('endDate', sa.DateTime(), nullable=True),
    sa.Column('maxGrade', sa.Float(), nullable=False),
    sa.Column('activityGroupId', sa.Integer(), nullable=True),
    sa.Column('linearCoefficient', sa.Float(), nullable=False),
    sa.Column('angularCoefficient', sa.Float(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['activityGroupId'], ['activityGroups.id'], ),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['postId'], ['posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('comments',
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('postId', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['postId'], ['posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expense_logs',
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('categoryId', sa.Integer(), nullable=False),
    sa.Column('proofId', sa.Integer(), nullable=True),
    sa.Column('type', sa.Enum('Deposit', 'Removal'), nullable=False),
    sa.Column('comment', sa.String(), nullable=True),
    sa.Column('paidToId', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['categoryId'], ['expense_categories.id'], ),
    sa.ForeignKeyConstraint(['paidToId'], ['users.id'], ),
    sa.ForeignKeyConstraint(['proofId'], ['attatches.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('frequencies',
    sa.Column('studentId', sa.Integer(), nullable=False),
    sa.Column('postId', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('Present', 'Missed', 'Justified'), nullable=False),
    sa.Column('justification', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['postId'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['studentId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('messages',
    sa.Column('fromId', sa.Integer(), nullable=False),
    sa.Column('toId', sa.Integer(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('postId', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['fromId'], ['users.id'], ),
    sa.ForeignKeyConstraint(['postId'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['toId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('postattachments',
    sa.Column('post_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.Enum('File', 'Link'), nullable=False),
    sa.Column('meta_data', sa.String(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('responses',
    sa.Column('postId', sa.Integer(), nullable=True),
    sa.Column('grade', sa.Float(), nullable=True),
    sa.Column('activityId', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=True),
    sa.Column('updatedAt', sa.DateTime(), nullable=True),
    sa.Column('addedById', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['activityId'], ['posts.id'], ),
    sa.ForeignKeyConstraint(['addedById'], ['users.id'], ),
    sa.ForeignKeyConstraint(['postId'], ['posts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('responses')
    op.drop_table('postattachments')
    op.drop_table('messages')
    op.drop_table('frequencies')
    op.drop_table('expense_logs')
    op.drop_table('comments')
    op.drop_table('activities')
    op.drop_table('students')
    op.drop_table('posts')
    op.drop_table('phone_numbers')
    op.drop_table('enrollments')
    op.drop_table('emails')
    op.drop_table('attatches')
    op.drop_table('addresses')
    op.drop_table('activityGroups')
    op.drop_table('series')
    op.drop_table('schools')
    op.drop_table('properties')
    op.drop_table('expense_categories')
    op.drop_table('classrooms')
    op.drop_table('bankAccounts')
    op.drop_table('achievements')
    op.drop_index(op.f('ix_users_cpf'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
